plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.plugin.compose' version "$kotlin_version"
}

def keystore = new Properties()
keystore.load(project.rootProject.file('local.properties').newDataInputStream())

version = '4.0.1'
group = 'com.prodege.bitlabs'

android {
    namespace 'ai.bitlabs.sdk'

    compileSdk 35

    defaultConfig {
        minSdk 21
        targetSdk 35
        multiDexEnabled true

        buildConfigField 'String', 'APP_TOKEN', keystore.getProperty('appToken', '"APP_TOKEN"')
        buildConfigField 'String', 'VERSION_NAME', "\"${version}\""

        testApplicationId System.getProperty('testApplicationId', 'ai.bitlabs.sdk.test')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions = ['sdk']

    productFlavors {
        core {
            buildConfigField 'String', 'DSN', '"https://74f1bae2ec6ab9e73a91f2d8e92c8f08@o494432.ingest.us.sentry.io/4508375634345985"'
        }
        unity {
            buildConfigField 'String', 'DSN', '"https://669f0df0ec50d3860eded78dad6eda63@o494432.ingest.us.sentry.io/4508652840091648"'
        }
    }

    publishing {
        singleVariant("coreRelease") {
            withSourcesJar()
        }

        singleVariant("unityRelease") {
            withSourcesJar()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    buildFeatures {
        compose true
        buildConfig true
    }
}

dependencies {
    def composeBom = platform('androidx.compose:compose-bom:2025.06.00')
    implementation composeBom
    debugImplementation composeBom

    debugImplementation 'androidx.compose.ui:ui-tooling'
    implementation 'androidx.compose.foundation:foundation'
    implementation 'androidx.compose.ui:ui-tooling-preview-android'

    implementation 'androidx.activity:activity-compose:1.10.1'

    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.browser:browser:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'

    // For Unity Variant to compile
    unityCompileOnly files('libs/classes.jar')

    // API Calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Error parsing to QRCode Bitmap
    implementation 'com.google.zxing:core:3.5.2'

    // Fetch Advertising ID
    implementation 'com.google.android.gms:play-services-ads-identifier:18.2.0'

    // Unit Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.13.1'
    testImplementation 'com.google.truth:truth:1.1.4'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2'

    // Instrumentation Testing
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'io.mockk:mockk-android:1.13.1'
    androidTestImplementation 'androidx.test.ext:truth:1.6.0'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
}

afterEvaluate {
    def mainPom = { pom ->
        pom.name = 'BitLabs Android SDK'
        pom.description = 'SDK for BitLabs monetization solutions'
        pom.url = 'https://github.com/BitBurst-GmbH/bitlabs-android-library'

        pom.licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        pom.developers {
            developer {
                name = 'Prodege, LLC'
                url = 'https://www.prodege.com'
            }
        }

        pom.scm {
            connection = 'scm:git:git://github.com/BitBurst-GmbH/bitlabs-android-library.git'
            developerConnection = 'scm:git:ssh://github.com/BitBurst-GmbH/bitlabs-android-library.git'
            url = 'https://github.com/BitBurst-GmbH/bitlabs-android-library'
        }
    }

    publishing {
        publications { // Creates two publications with different artifactIds
            core(MavenPublication) {
                from components.coreRelease
                artifactId = 'core'

                pom {
                    mainPom(delegate)
                }
            }

            unity(MavenPublication) {
                from components.unityRelease
                artifactId = 'unity'

                pom {
                    mainPom(delegate)

                    name = 'BitLabs Android SDK - Unity'
                    description = 'SDK for BitLabs monetization solutions with Unity support'
                }
            }
        }

        repositories {
            maven {
                name = 'staging'
                url = layout.buildDirectory.dir('staging')
            }
        }

        signing {
            def signingKey = keystore.getProperty('signing.keyId')
            def signingPassword = keystore.getProperty('signing.password')
            def signingSecretKeyBase64 = keystore.getProperty('signing.secretKey.base64')

            if (signingKey && signingPassword && signingSecretKeyBase64) {
                def signingSecretKey = new String(Base64.decoder.decode(signingSecretKeyBase64))
                useInMemoryPgpKeys(signingKey, signingSecretKey, signingPassword)
                sign publishing.publications
            } else {
                logger.warn("Signing properties not found. Skipping signing of artifacts.")
            }
        }
    }
}

tasks.register('createMavenCentralBundle', Zip) {
    group = 'publishing'
    description = 'Creates a zip file with the necessary files for publishing to Maven Central'

    dependsOn 'publishAllPublicationsToStagingRepository'

    archiveFileName = "bitlabs-android-sdk-${version}.zip"
    destinationDirectory = layout.buildDirectory.dir('mavenCentralBundle')

    from(layout.buildDirectory.dir('staging')) {
        include '**/*'
    }
}